import streamlit as st
import google.generativeai as genai
import textwrap
import datetime
import os
import time
import uuid

# --- Page Configuration ---
st.set_page_config(
    page_title="üçΩÔ∏è Smart Cooking App üòé",
    page_icon="üç≥",
    layout="wide",
    initial_sidebar_state="expanded",
)

# --- Visitor Counter (File-based persistence) ---
COUNTER_FILE = "visitor_count.txt"
ACTIVE_USERS_FILE = "active_users.txt"
ACTIVE_TIMEOUT = 20  # Consider users active if they interacted within 10 seconds
PING_INTERVAL = 5  # Ping every 5 seconds to keep users active


def get_visitor_count():
    """Gets the current visitor count from a file."""
    try:
        with open(COUNTER_FILE, "r") as f:
            content = f.read().strip()
            return int(content) if content else 0  # Handle empty file
    except FileNotFoundError:
        with open(COUNTER_FILE, "w") as f:
            f.write("0")
        return 0


def increment_visitor_count():
    """Increments the visitor count every time the page is accessed."""
    count = get_visitor_count() + 1
    with open(COUNTER_FILE, "w") as f:
        f.write(str(count))
    return count


def get_active_users():
    """Counts the number of active users in the last ACTIVE_TIMEOUT seconds and removes inactive ones."""
    current_time = time.time()
    active_users = {}
    try:
        with open(ACTIVE_USERS_FILE, "r") as f:
            for line in f:
                line = line.strip()
                if not line or "," not in line:
                    continue  # Skip empty or malformed lines
                user_id, last_seen = line.split(",")
                if current_time - float(last_seen) <= ACTIVE_TIMEOUT:
                    active_users[user_id] = last_seen
    except FileNotFoundError:
        pass

    # Update the file with only currently active users
    with open(ACTIVE_USERS_FILE, "w") as f:
        for user_id, last_seen in active_users.items():
            f.write(f"{user_id},{last_seen}\n")

    return len(active_users)


def update_active_user():
    """Keeps updating the user's active status while the page is open."""
    if "session_id" not in st.session_state:
        st.session_state.session_id = str(uuid.uuid4())
    user_id = st.session_state.session_id
    current_time = time.time()

    active_users = {}
    try:
        with open(ACTIVE_USERS_FILE, "r") as f:
            for line in f:
                line = line.strip()
                if not line or "," not in line:
                    continue
                parts = line.split(",")
                if len(parts) != 2:
                    continue
                existing_user_id, last_seen = parts
                active_users[existing_user_id] = last_seen
    except FileNotFoundError:
        pass

    # Update the current user's last seen time
    active_users[user_id] = str(current_time)
    with open(ACTIVE_USERS_FILE, "w") as f:
        for uid, last_seen in active_users.items():
            f.write(f"{uid},{last_seen}\n")


# --- API Key Setup (From Streamlit Secrets) ---
API_KEYS = st.secrets["API_KEYS"]

# --- Helper Functions ---
def call_gemini_api(prompt):
    for api_key in API_KEYS:
        try:
            genai.configure(api_key=api_key)
            model = genai.GenerativeModel("gemini-2.0-flash")
            response = model.generate_content(prompt)
            return response.text.strip()
        except Exception as e:
            error_message = str(e)
            if "insufficient_quota" in error_message or "Quota exceeded" in error_message:
                continue
            else:
                return f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {error_message}"
    return "‚ö†Ô∏è API ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏´‡∏°‡∏î‡πÇ‡∏Ñ‡∏ß‡∏ï‡πâ‡∏≤‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì"

def process_menus(response_text):
    menu_list = []
    separators = ["üçΩÔ∏è ‡πÄ‡∏°‡∏ô‡∏π‡∏ó‡∏µ‡πà", "\n- ", "\n‚Ä¢ ", "\n‚Äî ", "- ", "‚Ä¢ "]
    for sep in separators:
        if sep in response_text:
            menu_list = response_text.split(sep)
            break
    else:
        return [response_text.strip()]

    menu_list = [menu.strip() for menu in menu_list if menu.strip()]
    return menu_list

# --- Custom CSS ---
st.markdown("""
<style>
/* Global Styles */
body {
    font-family: 'Kanit', sans-serif;
}

.stApp {
    /* Default Streamlit background */
}

/* Main Container Styles */
.main-container {
    border-radius: 15px;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    padding: 30px;
    margin-bottom: 20px;
    border: 2px solid #e0e0e0;
}

/* Header - Title at the Top */
.title {
    color: #343a40;
    text-align: center;
    padding: 1rem 0;
    font-size: 2rem; /* Adjust as needed */
    font-weight: 700;
    margin-bottom: 1rem;
    position: relative; /* For positioning visitor counts */
    width: 100%;      /* Ensure it spans the full width */
    left: 0;
}

/* Visitor Count Styles - Positioned within the Title */
.visitor-info {
    position: absolute;
    top: -25px;
    width: 100%;
    display: flex;
    justify-content: space-between; /* Space out the counts */
    padding: 0 20px; /* Add some padding */
    font-size: 1.5rem;
    color: #666;

}


/* Mode Selection Buttons - Using st.buttons */
.mode-buttons {
    display: flex;
    justify-content: center;
    gap: 20px; /* Spacing between buttons */
    margin-bottom: 30px;
}

.mode-button {
    background-color: #007bff; /* Blue */
    color: white;
    border: none;
    border-radius: 8px; /* Rounded */
    padding: 15px 30px; /* Larger padding */
    font-size: 1.4rem;  /* Larger font */
    font-weight: bold;
    cursor: pointer;
    transition: all 0.3s ease;
    box-shadow: 0 2px 5px rgba(0,0,0,0.2);
}

.mode-button:hover {
    background-color: #0056b3; /* Darker blue on hover */
    transform: translateY(-2px);
}

.mode-button-selected {
    background-color: #4379ff; /* Green - for the selected mode */
    color: white;
    border: none;
    border-radius: 8px;
    padding: 15px 30px;
    font-size: 1.4rem;
    font-weight: bold;
    cursor: pointer;
    transition: all 0.3s ease;
    box-shadow: 0 2px 5px rgba(0,0,0,0.2);
}
.mode-button-selected:hover {
    background-color: #1e7e34;
    transform: translateY(-2px);
}
/* Subheaders */
.st-expanderHeader {
    font-size: 1.6rem; /* Even larger */
    font-weight: 700;
    margin-bottom: 0.5rem;
}

/* Input Sections */
.input-section {
    margin-bottom: 1rem;
}

/* Input Fields */
.stTextInput, .stSelectbox, .stSlider, .stRadio, .stNumberInput {
    margin-bottom: 0.8rem;
}

/* Text Area */
.stTextArea>div>div>textarea{
    border-color:#3498db;
    border-radius: 8px;
}

/* Buttons */
.stButton>button {
    background-color: #28a745;
    color: white;
    border: none;
    border-radius: 25px;
    padding: 12px 28px;
    font-size: 1.2rem;
    transition: all 0.3s ease;
    box-shadow: 0 3px 6px rgba(0, 0, 0, 0.15);
    width: 100%;
}

.stButton>button:hover {
    background-color: #218838;
    transform: translateY(-3px);
    box-shadow: 0 5px 10px rgba(0, 0, 0, 0.2);
}

.stButton>button:active {
    transform: translateY(0);
    box-shadow: 0 3px 6px rgba(0, 0, 0, 0.15);
}

/* Menu Columns */
.menu-column {
    border-radius: 12px;
    padding: 25px;
    margin-bottom: 15px;
    box-shadow: 0 3px 8px rgba(0, 0, 0, 0.1);
    transition: transform 0.25s ease, box-shadow: 0.25s ease;
    border: 1px solid #dee2e6;
}

.menu-column:hover {
    transform: scale(1.02);
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.15);
}

.menu-column h3 {
    color: #28a745;
    margin-bottom: 12px;
    font-size: 1.5rem;
    font-weight: 600;
}

.menu-item {
    font-size: 1.05rem;
    line-height: 1.7;
}

/* About Section */
.about-section {
    border-radius: 12px;
    padding: 25px;
    margin-top: 30px;
    box-shadow: 0 3px 8px rgba(0, 0, 0, 0.1);
    border: 1px solid #dee2e6;
}
.about-section ul {
    list-style: none;
    padding: 0;
}

.about-section li {
    margin-bottom: 0.6rem;
}

/* Spinners */
.st-cf {
    color: #28a745 !important;
}

/* Larger and Bolder Expander Text */
.st-expander button[data-baseweb="button"] {
    font-size: 1.4rem !important; /* Larger font */
    font-weight: bold !important;  /* Bold text */
}

/* Change expander icons */
.st-expander svg {
    color: #007bff; /* Blue expander icon */
}

/* Responsive adjustments for smaller screens */
@media (max-width: 768px) {
    .title {
        font-size: 2rem;
        font-weight: bold;
    }
    .visitor-info {
        top: -15px;
        font-size: 1rem;
        padding: 0 10px;
    }

     .mode-buttons{
        flex-direction: column; /* Stack buttons vertically */
    }
     .menu-column {
       padding: 15px;
    }
}


</style>
""", unsafe_allow_html=True)

# --- Increment Visitor Count and Update Active Users ---
visitor_count = increment_visitor_count()
update_active_user()
active_users = get_active_users()

# --- App UI ---
st.markdown("<h1 class='title'>üçΩÔ∏è Smart Cooking App Demo 0.2 üòé</h1>", unsafe_allow_html=True)
# --- Display Visitor Count and Active Users ---
st.markdown(f"<div class='visitor-info'><span>Page Views: {visitor_count}</span> <span>Active Users: {active_users}</span></div>", unsafe_allow_html=True)


with st.container(border=True):
    # --- Mode Selection (Using Buttons) ---
    # Use a single button to toggle between modes.  Initialize mode if not in session state.
    if 'mode' not in st.session_state:
        st.session_state.mode = "create"  # Default to 'create' mode

    # *Directly* set the button label and next_mode based on the *current* state.
    if st.session_state.mode == "create":
        button_label = "üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏°‡∏ô‡∏π"
        next_mode = "search"
        button_type = "secondary"
    else:
        button_label = "üìù ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏°‡∏ô‡∏π"
        next_mode = "create"
        button_type = "secondary"

    # The button *updates* the session state *before* the conditional display logic.
    if st.button(button_label, key="mode_toggle", type=button_type, use_container_width=True):
        st.session_state.mode = next_mode
        st.rerun()  # Force immediate rerun


    # --- Conditional Display based on Selected Mode ---
    if st.session_state.mode == "create":
        st.subheader("‚ú® ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏°‡∏ô‡∏π‡πÅ‡∏ö‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏≠‡∏á")

        with st.expander("üìù ‡∏Å‡∏£‡∏≠‡∏Å‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡∏´‡∏•‡∏±‡∏Å (‡∏Ñ‡∏±‡πà‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏à‡∏∏‡∏•‡∏†‡∏≤‡∏Ñ‡∏î‡πâ‡∏ß‡∏¢)", expanded=True):
            ingredients = st.text_area("‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡∏´‡∏•‡∏±‡∏Å (‡∏Ñ‡∏±‡πà‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏à‡∏∏‡∏•‡∏†‡∏≤‡∏Ñ):",
                                        placeholder="‡πÄ‡∏ä‡πà‡∏ô ‡πÑ‡∏Ç‡πà, ‡∏´‡∏°‡∏π‡∏™‡∏±‡∏ö, ‡∏ú‡∏±‡∏Å‡∏Å‡∏≤‡∏î...",
                                        height=120, label_visibility="collapsed")

        with st.expander("‚öôÔ∏è ‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á‡πÄ‡∏°‡∏ô‡∏π", expanded=True):
            col1, col2 = st.columns(2)
            with col1:
                category = st.selectbox("‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏≠‡∏≤‡∏´‡∏≤‡∏£",
                                        ["‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ", "‡∏°‡∏±‡∏á‡∏™‡∏ß‡∏¥‡∏£‡∏±‡∏ï‡∏¥", "‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏Ñ‡∏•‡∏µ‡∏ô", "‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÑ‡∏ó‡∏¢", "‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ç‡∏µ‡πà‡∏õ‡∏∏‡πà‡∏ô",
                                         "‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ï‡∏∞‡∏ß‡∏±‡∏ô‡∏ï‡∏Å", "‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏à‡∏µ‡∏ô", "‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏≠‡∏¥‡∏ô‡πÄ‡∏î‡∏µ‡∏¢", "‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÄ‡∏ß‡∏µ‡∏¢‡∏î‡∏ô‡∏≤‡∏°", "‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÄ‡∏Å‡∏≤‡∏´‡∏•‡∏µ",
                                         "‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÄ‡∏°‡πá‡∏Å‡∏ã‡∏¥‡∏Å‡∏±‡∏ô", "‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏≠‡∏¥‡∏ï‡∏≤‡πÄ‡∏•‡∏µ‡∏¢‡∏ô", "‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ü‡∏≤‡∏™‡∏ï‡πå‡∏ü‡∏π‡πâ‡∏î", "‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏∞‡πÄ‡∏•",
                                         "‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏°‡∏±‡∏á‡∏™‡∏ß‡∏¥‡∏£‡∏±‡∏ï‡∏¥", "‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÄ‡∏à", "‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏≠‡∏µ‡∏™‡∏≤‡∏ô", "‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÉ‡∏ï‡πâ", "‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÄ‡∏´‡∏ô‡∏∑‡∏≠",
                                         "‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ü‡∏¥‡∏ß‡∏ä‡∏±‡πà‡∏ô", "‡∏Ç‡∏ô‡∏°", "‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏î‡∏∑‡πà‡∏°"])
                calories = st.slider("‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ (kcal)", 100, 1500, 500, step=50)

            with col2:
                difficulty = st.radio("‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏Å", ["‡∏á‡πà‡∏≤‡∏¢", "‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á", "‡∏¢‡∏≤‡∏Å", '‡∏¢‡∏≤‡∏Å‡∏°‡∏≤‡∏Å', '‡∏ô‡∏£‡∏Å'], horizontal=True)
                cook_time = st.slider("‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏≠‡∏≤‡∏´‡∏≤‡∏£ (‡∏ô‡∏≤‡∏ó‡∏µ)", 5, 180, 30, step=5)

        if st.button("üç≥ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏°‡∏ô‡∏π", use_container_width=True):
            if ingredients:
                prompt = (f"‡∏â‡∏±‡∏ô‡∏°‡∏µ: {ingredients} ‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡∏´‡∏•‡∏±‡∏Å "
                          f"‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏°‡∏ô‡∏π {category} ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô {cook_time} ‡∏ô‡∏≤‡∏ó‡∏µ "
                          f"‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì {calories} kcal ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏Å ‡∏£‡∏∞‡∏î‡∏±‡∏ö{difficulty} "
                          f"‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏≥‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î ‡πÄ‡∏™‡∏ô‡∏≠ 3 ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ‡∏Ñ‡∏±‡πà‡∏ô‡∏î‡πâ‡∏ß‡∏¢ 'üçΩÔ∏è ‡πÄ‡∏°‡∏ô‡∏π‡∏ó‡∏µ‡πà' ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏Å‡∏£‡∏¥‡πà‡∏ô‡∏ô‡∏≥ ‡∏ñ‡πâ‡∏≤‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ç‡∏≤‡∏î‡∏≠‡∏∞‡πÑ‡∏£‡πÑ‡∏õ‡πÉ‡∏´‡πâ‡∏ö‡∏≠‡∏Å‡∏î‡πâ‡∏ß‡∏¢ ‡πÅ‡∏•‡∏∞‡∏ö‡∏≠‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î")
                with st.spinner("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏£‡∏£‡∏Ñ‡πå‡πÑ‡∏≠‡πÄ‡∏î‡∏µ‡∏¢‡∏≠‡∏£‡πà‡∏≠‡∏¢‡πÜ... 3 ‡πÄ‡∏°‡∏ô‡∏π"):
                    menu_list = process_menus(call_gemini_api(prompt))

                if menu_list:
                    st.subheader("üßë‚Äçüç≥ ‡πÄ‡∏°‡∏ô‡∏π‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ 3 ‡πÄ‡∏°‡∏ô‡∏π:")
                    cols = st.columns(3)
                    for i, menu in enumerate(menu_list[:3]):
                        with cols[i]:
                            # Convert Markdown **bold** to HTML <b> tags
                            menu = menu.replace("**", "<b>").replace("**", "</b>")
                            st.markdown(
                                f"<div class='menu-column'><h3>üçΩÔ∏è ‡πÄ‡∏°‡∏ô‡∏π‡∏ó‡∏µ‡πà {i + 1}</h3><p class='menu-item'>{menu}</p></div>",
                                unsafe_allow_html=True
                            )
                else:
                    st.warning("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏°‡∏ô‡∏π‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì ‡πÇ‡∏õ‡∏£‡∏î‡∏•‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤")
            else:
                st.warning("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì")


    elif st.session_state.mode == "search":
        st.subheader("‚ú® ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏°‡∏ô‡∏π‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏∏‡∏ì 3 ‡πÄ‡∏°‡∏ô‡∏π")

        with st.expander("‚öôÔ∏è ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤", expanded=True):
            col1, col2 = st.columns(2)
            with col1:
                country = st.selectbox('‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ',
                                        ["‡πÑ‡∏ó‡∏¢", "‡∏ç‡∏µ‡πà‡∏õ‡∏∏‡πà‡∏ô", "‡πÄ‡∏Å‡∏≤‡∏´‡∏•‡∏µ‡πÉ‡∏ï‡πâ", "‡∏™‡∏´‡∏£‡∏±‡∏ê‡∏≠‡πÄ‡∏°‡∏£‡∏¥‡∏Å‡∏≤", "‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©", "‡∏ù‡∏£‡∏±‡πà‡∏á‡πÄ‡∏®‡∏™", "‡πÄ‡∏¢‡∏≠‡∏£‡∏°‡∏ô‡∏µ",
                                         "‡∏à‡∏µ‡∏ô", "‡∏≠‡∏¥‡∏ô‡πÄ‡∏î‡∏µ‡∏¢", "‡∏£‡∏±‡∏™‡πÄ‡∏ã‡∏µ‡∏¢", "‡πÅ‡∏Ñ‡∏ô‡∏≤‡∏î‡∏≤", "‡∏ö‡∏£‡∏≤‡∏ã‡∏¥‡∏•", "‡∏≠‡∏≠‡∏™‡πÄ‡∏ï‡∏£‡πÄ‡∏•‡∏µ‡∏¢", "‡∏≠‡∏≤‡∏£‡πå‡πÄ‡∏à‡∏ô‡∏ï‡∏¥‡∏ô‡∏≤",
                                         "‡πÄ‡∏°‡πá‡∏Å‡∏ã‡∏¥‡πÇ‡∏Å", "‡∏≠‡∏¥‡∏ï‡∏≤‡∏•‡∏µ", "‡∏™‡πÄ‡∏õ‡∏ô", "‡πÄ‡∏ô‡πÄ‡∏ò‡∏≠‡∏£‡πå‡πÅ‡∏•‡∏ô‡∏î‡πå", "‡∏™‡∏ß‡∏¥‡∏ï‡πÄ‡∏ã‡∏≠‡∏£‡πå‡πÅ‡∏•‡∏ô‡∏î‡πå", "‡πÄ‡∏ö‡∏•‡πÄ‡∏¢‡∏µ‡∏¢‡∏°",
                                         "‡∏™‡∏ß‡∏µ‡πÄ‡∏î‡∏ô", "‡∏ô‡∏≠‡∏£‡πå‡πÄ‡∏ß‡∏¢‡πå", "‡πÄ‡∏î‡∏ô‡∏°‡∏≤‡∏£‡πå‡∏Å", "‡∏ü‡∏¥‡∏ô‡πÅ‡∏•‡∏ô‡∏î‡πå", "‡πÇ‡∏õ‡∏£‡∏ï‡∏∏‡πÄ‡∏Å‡∏™", "‡∏≠‡∏≠‡∏™‡πÄ‡∏ï‡∏£‡∏µ‡∏¢", "‡πÑ‡∏≠‡∏£‡πå‡πÅ‡∏•‡∏ô‡∏î‡πå",
                                         "‡∏Å‡∏£‡∏µ‡∏ã", "‡∏ï‡∏∏‡∏£‡∏Å‡∏µ", "‡πÅ‡∏≠‡∏ü‡∏£‡∏¥‡∏Å‡∏≤‡πÉ‡∏ï‡πâ", "‡∏≠‡∏µ‡∏¢‡∏¥‡∏õ‡∏ï‡πå", "‡πÑ‡∏ô‡∏à‡∏µ‡πÄ‡∏£‡∏µ‡∏¢", "‡πÄ‡∏Ñ‡∏ô‡∏¢‡∏≤", "‡πÇ‡∏°‡∏£‡πá‡∏≠‡∏Å‡πÇ‡∏Å",
                                         "‡πÅ‡∏≠‡∏•‡∏à‡∏µ‡πÄ‡∏£‡∏µ‡∏¢", "‡∏ã‡∏≤‡∏≠‡∏∏‡∏î‡∏µ‡∏≠‡∏≤‡∏£‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢", "‡∏™‡∏´‡∏£‡∏±‡∏ê‡∏≠‡∏≤‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏≠‡∏°‡∏¥‡πÄ‡∏£‡∏ï‡∏™‡πå", "‡∏Å‡∏≤‡∏ï‡∏≤‡∏£‡πå", "‡πÇ‡∏≠‡∏°‡∏≤‡∏ô", "‡∏Ñ‡∏π‡πÄ‡∏ß‡∏ï",
                                         "‡∏≠‡∏¥‡∏´‡∏£‡πà‡∏≤‡∏ô", "‡∏≠‡∏¥‡∏£‡∏±‡∏Å", "‡∏õ‡∏≤‡∏Å‡∏µ‡∏™‡∏ñ‡∏≤‡∏ô", "‡∏ö‡∏±‡∏á‡∏Å‡∏•‡∏≤‡πÄ‡∏ó‡∏®", "‡∏≠‡∏¥‡∏ô‡πÇ‡∏î‡∏ô‡∏µ‡πÄ‡∏ã‡∏µ‡∏¢", "‡∏°‡∏≤‡πÄ‡∏•‡πÄ‡∏ã‡∏µ‡∏¢", "‡∏™‡∏¥‡∏á‡∏Ñ‡πÇ‡∏õ‡∏£‡πå",
                                         "‡∏ü‡∏¥‡∏•‡∏¥‡∏õ‡∏õ‡∏¥‡∏ô‡∏™‡πå", "‡πÄ‡∏ß‡∏µ‡∏¢‡∏î‡∏ô‡∏≤‡∏°", "‡∏û‡∏°‡πà‡∏≤", "‡∏Å‡∏±‡∏°‡∏û‡∏π‡∏ä‡∏≤", "‡∏•‡∏≤‡∏ß", "‡∏°‡∏≠‡∏á‡πÇ‡∏Å‡πÄ‡∏•‡∏µ‡∏¢", "‡πÄ‡∏Å‡∏≤‡∏´‡∏•‡∏µ‡πÄ‡∏´‡∏ô‡∏∑‡∏≠",
                                         "‡πÑ‡∏ï‡πâ‡∏´‡∏ß‡∏±‡∏ô", "‡∏Æ‡πà‡∏≠‡∏á‡∏Å‡∏á", "‡∏°‡∏≤‡πÄ‡∏Å‡πä‡∏≤", "‡∏ô‡∏¥‡∏ß‡∏ã‡∏µ‡πÅ‡∏•‡∏ô‡∏î‡πå", "‡∏ü‡∏¥‡∏à‡∏¥", "‡∏õ‡∏≤‡∏õ‡∏±‡∏ß‡∏ô‡∏¥‡∏ß‡∏Å‡∏¥‡∏ô‡∏µ",
                                         "‡∏´‡∏°‡∏π‡πà‡πÄ‡∏Å‡∏≤‡∏∞‡πÇ‡∏ã‡πÇ‡∏•‡∏°‡∏≠‡∏ô", "‡∏ß‡∏≤‡∏ô‡∏π‡∏≠‡∏≤‡∏ï‡∏π", "‡∏ô‡∏≤‡∏≠‡∏π‡∏£‡∏π", "‡∏ï‡∏π‡∏ß‡∏≤‡∏•‡∏π", "‡∏Ñ‡∏¥‡∏£‡∏¥‡∏ö‡∏≤‡∏™", "‡πÑ‡∏°‡πÇ‡∏Ñ‡∏£‡∏ô‡∏µ‡πÄ‡∏ã‡∏µ‡∏¢",
                                         "‡∏´‡∏°‡∏π‡πà‡πÄ‡∏Å‡∏≤‡∏∞‡∏°‡∏≤‡∏£‡πå‡πÅ‡∏ä‡∏•‡∏•‡πå", "‡∏õ‡∏≤‡πÄ‡∏•‡∏≤", "‡∏ã‡∏≤‡∏°‡∏±‡∏ß", "‡∏ï‡∏≠‡∏á‡∏Å‡∏≤", "‡∏ô‡∏µ‡∏ß‡πÄ‡∏ß‡∏¢‡πå", "‡∏´‡∏°‡∏π‡πà‡πÄ‡∏Å‡∏≤‡∏∞‡∏Ñ‡∏∏‡∏Å",
                                         "‡πÄ‡∏ü‡∏£‡∏ô‡∏ä‡πå‡πÇ‡∏õ‡∏•‡∏¥‡∏ô‡∏µ‡πÄ‡∏ã‡∏µ‡∏¢", "‡∏ô‡∏¥‡∏ß‡πÅ‡∏Ñ‡∏•‡∏¥‡πÇ‡∏î‡πÄ‡∏ô‡∏µ‡∏¢", "‡∏ß‡∏≤‡∏•‡∏•‡∏¥‡∏™‡πÅ‡∏•‡∏∞‡∏ü‡∏π‡∏ï‡∏π‡∏ô‡∏≤",
                                         "‡πÄ‡∏ü‡∏£‡∏ô‡∏ä‡πå‡πÄ‡∏ã‡∏≤‡πÄ‡∏ó‡∏¥‡∏£‡πå‡∏ô‡πÅ‡∏•‡∏∞‡πÅ‡∏≠‡∏ô‡∏ï‡∏≤‡∏£‡πå‡∏Å‡∏ï‡∏¥‡∏Å‡πÅ‡∏•‡∏ô‡∏î‡∏™‡πå", "‡πÄ‡∏ã‡∏ô‡∏ï‡πå‡πÄ‡∏Æ‡πÄ‡∏•‡∏ô‡∏≤", "‡∏≠‡∏±‡∏™‡πÄ‡∏ã‡∏ô‡∏ä‡∏±‡∏ô ‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏¥‡∏™‡∏ï‡∏±‡∏ô‡∏î‡∏≤‡∏Å‡∏π‡∏ô‡∏¢‡∏≤",
                                         "‡∏´‡∏°‡∏π‡πà‡πÄ‡∏Å‡∏≤‡∏∞‡∏ü‡∏≠‡∏•‡πå‡∏Å‡πÅ‡∏•‡∏ô‡∏î‡πå", "‡πÄ‡∏ã‡∏≤‡∏ó‡πå‡∏à‡∏≠‡∏£‡πå‡πÄ‡∏à‡∏µ‡∏¢‡πÅ‡∏•‡∏∞‡∏´‡∏°‡∏π‡πà‡πÄ‡∏Å‡∏≤‡∏∞‡πÄ‡∏ã‡∏≤‡∏ó‡πå‡πÅ‡∏ã‡∏ô‡∏î‡πå‡∏ß‡∏¥‡∏ä", "‡∏´‡∏°‡∏π‡πà‡πÄ‡∏Å‡∏≤‡∏∞‡∏û‡∏¥‡∏ï‡πÅ‡∏Ñ‡∏£‡πå‡∏ô",
                                         "‡∏ö‡∏£‡∏¥‡∏ï‡∏¥‡∏ä‡∏≠‡∏¥‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ô‡πÇ‡∏≠‡πÄ‡∏ä‡∏µ‡∏¢‡∏ô‡πÄ‡∏ó‡∏£‡πå‡∏£‡∏¥‡∏ó‡∏≠‡∏£‡∏µ", "‡∏´‡∏°‡∏π‡πà‡πÄ‡∏Å‡∏≤‡∏∞‡∏ö‡∏£‡∏¥‡∏ï‡∏¥‡∏ä‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏à‡∏¥‡∏ô", "‡∏´‡∏°‡∏π‡πà‡πÄ‡∏Å‡∏≤‡∏∞‡πÄ‡∏Ñ‡∏¢‡πå‡πÅ‡∏°‡∏ô",
                                         "‡∏°‡∏≠‡∏ô‡∏ï‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏£‡∏±‡∏ï", "‡∏≠‡∏±‡∏áGuilla", "‡∏≠‡∏≤‡∏£‡∏π‡∏ö‡∏≤", "‡∏Å‡∏π‡∏£‡∏≤‡πÄ‡∏ã‡∏≤", "‡∏ã‡∏¥‡∏ô‡∏ï‡πå‡∏°‡∏≤‡∏£‡πå‡πÄ‡∏ï‡∏¥‡∏ô", "‡πÇ‡∏ö‡πÅ‡∏ô‡∏£‡πå",
                                         "‡πÄ‡∏ã‡∏ô‡∏ï‡πå‡πÄ‡∏≠‡∏¥‡∏™‡∏ï‡∏≤‡πÄ‡∏ä‡∏µ‡∏¢‡∏™‡πÅ‡∏•‡∏∞‡πÄ‡∏ã‡∏ô‡∏ï‡πå‡∏°‡∏≤‡∏£‡πå‡πÄ‡∏ï‡∏¥‡∏ô", "‡∏Å‡∏£‡∏µ‡∏ô‡πÅ‡∏•‡∏ô‡∏î‡πå", "‡∏´‡∏°‡∏π‡πà‡πÄ‡∏Å‡∏≤‡∏∞‡πÅ‡∏ü‡πÇ‡∏£", "‡∏¢‡∏¥‡∏ö‡∏£‡∏≠‡∏•‡∏ï‡∏≤‡∏£‡πå",
                                         "‡∏≠‡∏≤‡∏Å‡∏£‡∏µ‡∏≠‡∏≤‡πÅ‡∏•‡∏∞‡∏ö‡∏≤‡∏£‡πå‡∏ö‡∏π‡∏î‡∏≤", "‡πÅ‡∏≠‡∏ô‡∏ï‡∏¥‡∏Å‡∏≤‡πÅ‡∏•‡∏∞‡∏ö‡∏≤‡∏£‡πå‡∏ö‡∏π‡∏î‡∏≤", "‡∏ö‡∏≤‡∏£‡πå‡πÄ‡∏ö‡πÇ‡∏î‡∏™", "‡∏î‡∏≠‡∏°‡∏¥‡∏ô‡∏¥‡∏Å‡∏≤", "‡πÄ‡∏Å‡∏£‡∏ô‡∏≤‡∏î‡∏≤",
                                         "‡πÄ‡∏ã‡∏ô‡∏ï‡πå‡∏Ñ‡∏¥‡∏ï‡∏™‡πå‡πÅ‡∏•‡∏∞‡πÄ‡∏ô‡∏ß‡∏¥‡∏™", "‡πÄ‡∏ã‡∏ô‡∏ï‡πå‡∏•‡∏π‡πÄ‡∏ã‡∏µ‡∏¢", "‡πÄ‡∏ã‡∏ô‡∏ï‡πå‡∏ß‡∏¥‡∏ô‡πÄ‡∏ã‡∏ô‡∏ï‡πå‡πÅ‡∏•‡∏∞‡πÄ‡∏Å‡∏£‡∏ô‡∏≤‡∏î‡∏µ‡∏ô‡∏™‡πå",
                                         "‡∏ï‡∏£‡∏¥‡∏ô‡∏¥‡πÅ‡∏î‡∏î‡πÅ‡∏•‡∏∞‡πÇ‡∏ï‡πÄ‡∏ö‡πÇ‡∏Å", "‡πÅ‡∏≠‡∏á‡πÇ‡∏Å‡∏•‡∏≤", "‡πÄ‡∏ö‡∏ô‡∏¥‡∏ô", "‡∏ö‡∏≠‡∏ï‡∏™‡∏ß‡∏≤‡∏ô‡∏≤", "‡∏ö‡∏π‡∏£‡πå‡∏Å‡∏¥‡∏ô‡∏≤‡∏ü‡∏≤‡πÇ‡∏ã", "‡∏ö‡∏∏‡∏£‡∏∏‡∏ô‡∏î‡∏µ",
                                         "‡∏Å‡∏≤‡∏ö‡∏π‡πÄ‡∏ß‡∏£‡πå‡∏î‡∏µ", "‡πÅ‡∏Ñ‡πÄ‡∏°‡∏≠‡∏£‡∏π‡∏ô", "‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏£‡∏±‡∏ê‡πÅ‡∏≠‡∏ü‡∏£‡∏¥‡∏Å‡∏≤‡∏Å‡∏•‡∏≤‡∏á", "‡∏ä‡∏≤‡∏î", "‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏£‡∏±‡∏ê‡∏Ñ‡∏≠‡∏á‡πÇ‡∏Å",
                                         "‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏£‡∏±‡∏ê‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ò‡∏¥‡∏õ‡πÑ‡∏ï‡∏¢‡∏Ñ‡∏≠‡∏á‡πÇ‡∏Å", "‡πÇ‡∏Å‡∏ï‡∏î‡∏¥‡∏ß‡∏±‡∏ß‡∏£‡πå", "‡∏à‡∏¥‡∏ö‡∏π‡∏ï‡∏µ", "‡∏≠‡∏µ‡∏¢‡∏¥‡∏õ‡∏ï‡πå", "‡∏≠‡∏¥‡πÄ‡∏Ñ‡∏ß‡∏ó‡∏≠‡πÄ‡∏£‡∏µ‡∏¢‡∏•‡∏Å‡∏¥‡∏ô‡∏µ",
                                         "‡πÄ‡∏≠‡∏£‡∏¥‡πÄ‡∏ó‡∏£‡∏µ‡∏¢", "‡πÄ‡∏≠‡∏™‡∏ß‡∏≤‡∏ï‡∏¥‡∏ô‡∏µ", "‡πÄ‡∏≠‡∏ò‡∏¥‡πÇ‡∏≠‡πÄ‡∏õ‡∏µ‡∏¢", "‡∏Å‡∏≤‡∏ö‡∏≠‡∏á", "‡πÅ‡∏Å‡∏°‡πÄ‡∏ö‡∏µ‡∏¢", "‡∏Å‡∏≤‡∏ô‡∏≤", "‡∏Å‡∏¥‡∏ô‡∏µ",
                                         "‡∏Å‡∏¥‡∏ô‡∏µ-‡∏ö‡∏¥‡∏™‡πÄ‡∏ã‡∏≤", "‡πÄ‡∏Ñ‡∏ô‡∏¢‡∏≤", "‡πÄ‡∏•‡πÇ‡∏ã‡πÇ‡∏ó", "‡πÑ‡∏•‡∏ö‡∏µ‡πÄ‡∏£‡∏µ‡∏¢", "‡∏•‡∏¥‡πÄ‡∏ö‡∏µ‡∏¢", "‡∏°‡∏≤‡∏î‡∏≤‡∏Å‡∏±‡∏™‡∏Å‡∏≤‡∏£‡πå", "‡∏°‡∏≤‡∏•‡∏≤‡∏ß‡∏µ",
                                         "‡∏°‡∏≤‡∏•‡∏µ", "‡∏°‡∏≠‡∏£‡∏¥‡πÄ‡∏ï‡πÄ‡∏ô‡∏µ‡∏¢", "‡∏°‡∏≠‡∏£‡∏¥‡πÄ‡∏ä‡∏µ‡∏¢‡∏™", "‡πÇ‡∏°‡∏£‡πá‡∏≠‡∏Å‡πÇ‡∏Å", "‡πÇ‡∏°‡∏ã‡∏±‡∏°‡∏ö‡∏¥‡∏Å", "‡∏ô‡∏≤‡∏°‡∏¥‡πÄ‡∏ö‡∏µ‡∏¢", "‡πÑ‡∏ô‡πÄ‡∏à‡∏≠‡∏£‡πå",
                                         "‡πÑ‡∏ô‡∏à‡∏µ‡πÄ‡∏£‡∏µ‡∏¢", "‡∏£‡∏ß‡∏±‡∏ô‡∏î‡∏≤", "‡πÄ‡∏ã‡∏≤‡∏ï‡∏π‡πÄ‡∏°‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏¥‡∏ô‡∏ã‡∏¥‡∏õ‡∏µ", "‡πÄ‡∏ã‡πÄ‡∏ô‡∏Å‡∏±‡∏•", "‡πÄ‡∏ã‡πÄ‡∏ä‡∏•‡∏™‡πå", "‡πÄ‡∏ã‡∏µ‡∏¢‡∏£‡πå‡∏£‡∏≤‡∏•‡∏µ‡πÇ‡∏≠‡∏ô",
                                         "‡πÇ‡∏ã‡∏°‡∏≤‡πÄ‡∏•‡∏µ‡∏¢", "‡πÅ‡∏≠‡∏ü‡∏£‡∏¥‡∏Å‡∏≤‡πÉ‡∏ï‡πâ", "‡∏ã‡∏π‡∏î‡∏≤‡∏ô‡πÉ‡∏ï‡πâ", "‡∏ã‡∏π‡∏î‡∏≤‡∏ô", "‡πÅ‡∏ó‡∏ô‡∏ã‡∏≤‡πÄ‡∏ô‡∏µ‡∏¢", "‡πÇ‡∏ï‡πÇ‡∏Å", "‡∏ï‡∏π‡∏ô‡∏¥‡πÄ‡∏ã‡∏µ‡∏¢",
                                         "‡∏¢‡∏π‡∏Å‡∏±‡∏ô‡∏î‡∏≤", "‡πÅ‡∏ã‡∏°‡πÄ‡∏ö‡∏µ‡∏¢", "‡∏ã‡∏¥‡∏°‡∏ö‡∏±‡∏ö‡πÄ‡∏ß"])
                category = st.selectbox("‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏≠‡∏≤‡∏´‡∏≤‡∏£",
                                        ["‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÑ‡∏ó‡∏¢", "‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ç‡∏µ‡πà‡∏õ‡∏∏‡πà‡∏ô", "‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÄ‡∏Å‡∏≤‡∏´‡∏•‡∏µ", "‡∏ü‡∏≤‡∏™‡∏ï‡πå‡∏ü‡∏π‡πâ‡∏î", "‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û", "‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏à‡∏µ‡∏ô",
                                         "‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏≠‡∏¥‡∏ô‡πÄ‡∏î‡∏µ‡∏¢", "‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÄ‡∏ß‡∏µ‡∏¢‡∏î‡∏ô‡∏≤‡∏°", "‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÄ‡∏°‡πá‡∏Å‡∏ã‡∏¥‡∏Å‡∏±‡∏ô", "‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏≠‡∏¥‡∏ï‡∏≤‡πÄ‡∏•‡∏µ‡∏¢‡∏ô", "‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏∞‡πÄ‡∏•",
                                         "‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏°‡∏±‡∏á‡∏™‡∏ß‡∏¥‡∏£‡∏±‡∏ï‡∏¥", "‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÄ‡∏à", "‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏≠‡∏µ‡∏™‡∏≤‡∏ô", "‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÉ‡∏ï‡πâ", "‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÄ‡∏´‡∏ô‡∏∑‡∏≠",
                                         "‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ü‡∏¥‡∏ß‡∏ä‡∏±‡πà‡∏ô", "‡∏Ç‡∏ô‡∏°", "‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏î‡∏∑‡πà‡∏°", "‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ï‡∏∞‡∏ß‡∏±‡∏ô‡∏ï‡∏Å", "‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ô‡∏≤‡∏ô‡∏≤‡∏ä‡∏≤‡∏ï‡∏¥"])
            with col2:
                taste = st.radio("‡∏£‡∏™‡∏ä‡∏≤‡∏ï‡∏¥", ["‡πÄ‡∏ú‡πá‡∏î", "‡∏´‡∏ß‡∏≤‡∏ô", "‡πÄ‡∏Ñ‡πá‡∏°", "‡πÄ‡∏õ‡∏£‡∏µ‡πâ‡∏¢‡∏ß", "‡∏Ç‡∏°", "‡∏≠‡∏π‡∏°‡∏≤‡∏°‡∏¥", "‡∏°‡∏±‡∏ô", "‡∏ù‡∏≤‡∏î", "‡∏à‡∏∑‡∏î", '‡∏£‡∏™‡∏à‡∏±‡∏î',
                                                 '‡∏Å‡∏•‡∏°‡∏Å‡∏•‡πà‡∏≠‡∏°', '‡∏Å‡∏•‡∏≤‡∏á‡πÜ'], horizontal=True)
                budget = st.radio("‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì", ['‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤ 100 ‡∏ö‡∏≤‡∏ó', '100 - 300 ‡∏ö‡∏≤‡∏ó', '300 - 1000 ‡∏ö‡∏≤‡∏ó', '1000 - 10000 ‡∏ö‡∏≤‡∏ó',
                                                 '‡πÑ‡∏°‡πà‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏á‡∏ö(‡∏£‡∏∞‡∏î‡∏±‡∏ö MrBeast)'], horizontal=True)

        if st.button("üîé ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏°‡∏ô‡∏π", use_container_width=True):
            if budget == '‡πÑ‡∏°‡πà‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏á‡∏ö(‡∏£‡∏∞‡∏î‡∏±‡∏ö MrBeast)':
                prompt = (f"‡∏â‡∏±‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠‡∏≠‡∏≤‡∏´‡∏≤‡∏£ {category} ‡∏£‡∏™‡∏ä‡∏≤‡∏ï‡∏¥ {taste} ‡∏£‡∏≤‡∏Ñ‡∏≤ 10000 -10000000 ‡∏ö‡∏≤‡∏ó {budget} ‡∏ó‡∏µ‡∏°‡∏µ‡∏Ç‡∏≤‡∏¢‡πÉ‡∏ô {country} "
                          f"‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ 3 ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏°‡∏ô‡∏π {category} ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ç‡∏≤‡∏¢‡πÉ‡∏ô {country} ‡∏Ñ‡∏±‡πà‡∏ô‡∏î‡πâ‡∏ß‡∏¢ 'üçΩÔ∏è ‡πÄ‡∏°‡∏ô‡∏π‡∏ó‡∏µ‡πà' ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏Å‡∏£‡∏¥‡πà‡∏ô‡∏ô‡∏≥ ‡∏ö‡∏≠‡∏Å‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≠‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏î‡πâ‡∏ß‡∏¢ ‡∏ö‡∏≠‡∏Å‡∏î‡πâ‡∏ß‡∏¢‡∏ß‡πà‡∏≤‡∏´‡∏≤‡∏ã‡∏∑‡πâ‡∏≠‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà‡∏£‡πâ‡∏≤‡∏ô‡πÑ‡∏´‡∏ô")
                print('MrBeast')
            else:
                prompt = (f"‡∏â‡∏±‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠‡∏≠‡∏≤‡∏´‡∏≤‡∏£ {category} ‡∏£‡∏™‡∏ä‡∏≤‡∏ï‡∏¥ {taste} ‡∏£‡∏≤‡∏Ñ‡∏≤ {budget} ‡∏ó‡∏µ‡∏°‡∏µ‡∏Ç‡∏≤‡∏¢‡πÉ‡∏ô {country} "
                          f"‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ 3 ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏°‡∏ô‡∏π {category} ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ç‡∏≤‡∏¢‡πÉ‡∏ô {country} ‡∏Ñ‡∏±‡πà‡∏ô‡∏î‡πâ‡∏ß‡∏¢ 'üçΩÔ∏è ‡πÄ‡∏°‡∏ô‡∏π‡∏ó‡∏µ‡πà' ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏Å‡∏£‡∏¥‡πà‡∏ô‡∏ô‡∏≥ ‡∏ö‡∏≠‡∏Å‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≠‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏î‡πâ‡∏ß‡∏¢ ‡∏ö‡∏≠‡∏Å‡∏î‡πâ‡∏ß‡∏¢‡∏ß‡πà‡∏≤‡∏´‡∏≤‡∏ã‡∏∑‡πâ‡∏≠‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà‡∏£‡πâ‡∏≤‡∏ô‡πÑ‡∏´‡∏ô")
            with st.spinner("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î... 3 ‡πÄ‡∏°‡∏ô‡∏π"):
                menu_list = process_menus(call_gemini_api(prompt))

            if menu_list:
                st.subheader("üßë‚Äçüç≥ ‡πÄ‡∏°‡∏ô‡∏π‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ 3 ‡πÄ‡∏°‡∏ô‡∏π:")
                cols = st.columns(3)
                for i, menu in enumerate(menu_list[:3]):
                    with cols[i]:
                        menu = menu.replace("**", "<b>").replace("**", "</b>")  # Convert **text** to <b>text</b>
                        st.markdown(
                            f"<div class='menu-column'><h3>üçΩÔ∏è ‡πÄ‡∏°‡∏ô‡∏π‡∏ó‡∏µ‡πà {i + 1}</h3><p class='menu-item'>{menu}</p></div>",
                            unsafe_allow_html=True
                        )
            else:
                st.warning("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏°‡∏ô‡∏π ‡πÇ‡∏õ‡∏£‡∏î‡∏•‡∏≠‡∏á‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á")

# --- About Section ---
st.markdown("---")
if st.button("üìú ‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏û‡∏±‡∏í‡∏ô‡∏≤", use_container_width=True):
    with st.expander("ü§ù ‡∏û‡∏ö‡∏Å‡∏±‡∏ö‡∏ó‡∏µ‡∏°‡∏á‡∏≤‡∏ô", expanded=False):
        st.markdown("""
        <div class='about-section'>
        <ul style='list-style: none; padding: 0; display: flex; flex-direction: column; align-items: center;'>

        <li style='font-size: 1.6rem; font-weight: bold; margin-top: 10px;'>‡∏ô‡∏≤‡∏¢ ‡∏Å‡∏±‡∏•‡∏õ‡∏û‡∏§‡∏Å‡∏©‡πå ‡∏ß‡∏¥‡πÄ‡∏ä‡∏µ‡∏¢‡∏£‡∏£‡∏±‡∏ï‡∏ô‡πå (‡∏Ñ‡∏ô‡πÅ‡∏ö‡∏Å‡∏≠‡∏¥‡πÜ‡πÜüòé)</li>
        <li style='font-size: 1.3rem;'><em>‡∏ä‡∏±‡πâ‡∏ô 6/13 ‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà 3</em></li>
        <img src='https://media-hosting.imagekit.io//1b3ed8f3573a4e71/IMG_20241011_135949_649.webp?Expires=1833623214&Key-Pair-Id=K2ZIVPTIP2VGHC&Signature=XkV2~CAZ1JL5DLoYHTK43-DH1HSmbcpRfZqqgUbS~YZHNtsgvL-UkoVf9iDz8-pZKNYsLqdyFOahcMiuMR1ao1FQiu3I2iqWiSmsoBiHOfr3OxBObD32WF30wS6NTbMCg7MmWPKCratj29lGI0fhN~33HlEnQ50hMnDRnH9CKvwY3tOWxM2sTNcwZ5J1Q1nP5wCAUwCCFaeNxJwFxCWLBdR268qhrfTxu9-pgodzqM1~Jv0bj3UTjx2i7IMm7eLjfU14x4aE9HUjTKrgvzsadlHSzJgYIyhQvetbRsEVPeIiiIz9aMo3YzK-JCz3CPMnoU-7aBLe5yLmVOEeHvMTIQ__' width='250px' style='border-radius: 10%; margin-bottom: 20px;'>

        <li style='font-size: 1.6rem; font-weight: bold; margin-top: 10px;'>‡∏ô‡∏≤‡∏¢ ‡∏ò‡∏µ‡∏£‡∏≤‡∏ò‡∏£ ‡∏°‡∏∏‡∏Å‡∏î‡∏≤‡πÄ‡∏û‡∏ä‡∏£‡∏£‡∏±‡∏ï‡∏ô‡πå (‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢ No.1)</li>
        <li style='font-size: 1.3rem;'><em>‡∏ä‡∏±‡πâ‡∏ô 6/13 ‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà 13</em></li>
        <img src='https://media-hosting.imagekit.io//794cd2dd43b24aff/perth_tm2025_02_08_18_38_478aae62c6-a109-49ec-aef1-8152096b5149.jpg?Expires=1833622873&Key-Pair-Id=K2ZIVPTIP2VGHC&Signature=u9sNP10b88y78jCRRUyLwn3OeHhsL7C0QbvaOcjCmOSGCD69RWN6e08aV19Se-7mknqcTF~zU9~snvhpFExvNR9jMhDubAePljCWIhBzzbpsRsOQ5akdEMa9AXVUOuXIzFN-igpqs-g9t8y~TqJ6mOO7daYkGa~L6Pnp3~G47pI3yWS5DVZ5hXcSHK7GQmupabIkfaaM-67FPYu7wF96vGlfatkSqA5zzIUGeX0yc~3kzI7dlCzqzqaXRKng6upQ07299g0LwFv3LBRO22VffO1fZr82TxnXUdEPcfmci-esT9LH6JEKwRET2fRLklG~qBRLc8wnzS0RdyrYjXRhEA__' width='250px' style='border-radius: 50%; margin-bottom: 20px;'>

        <li style='font-size: 1.6rem; font-weight: bold; margin-top: 10px;'>‡∏ô‡∏≤‡∏¢ ‡∏≠‡∏†‡∏¥‡∏ß‡∏¥‡∏ä‡∏ç‡πå ‡∏≠‡∏î‡∏∏‡∏•‡∏ò‡∏£‡∏£‡∏°‡∏ß‡∏¥‡∏ó‡∏¢‡πå (‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢ No.2)</li>
        <li style='font-size: 1.3rem;'><em>‡∏ä‡∏±‡πâ‡∏ô 6/13 ‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà 28</em></li>
        <img src='https://media-hosting.imagekit.io//e3962c8e8fa84567/513%2028.jpg?Expires=1833636651&Key-Pair-Id=K2ZIVPTIP2VGHC&Signature=IApvPc310iSHh~zIvIWoOHb-ABMcnPIPUmVAfVKHMQAz66kE1hCxbPUEWQNAIiekpZ1oDq9Nf8rmJ18AlAFtxzRAEOVGCXV1UWgz79A7kCvHHMbV1MnsOD2ZfY60ApLE-FRccfbKP3nLjaGZkcR3YA2ynywJVFHHau6MMA6mTUvy41nTWtRi9EDNP2Pbkxpr7hemhzcbtanbqtASvUHfWHspP5WXgJOXxq-TgoMYJudxvJbUsyp1Kg0WV1TOmo91xMgs5DC14xVXaE9lJ6NwfIG3zvoLehDiIXpYrGaI~nG~KUGXQJK~1st7lCdnkoLrCQhXJ55pGIOeIspbRj0LDQ__' width='250px' style='border-radius: 50%; margin-bottom: 20px;'>

        <li style='font-size: 1.6rem; font-weight: bold; margin-top: 10px;'>‡∏ô‡∏≤‡∏¢ ‡∏õ‡∏±‡∏ì‡∏ì‡∏ß‡∏¥‡∏ä‡∏ç‡πå ‡∏´‡∏•‡∏µ‡∏Å‡∏†‡∏±‡∏¢</li>
        <li style='font-size: 1.3rem;'><em>‡∏ä‡∏±‡πâ‡∏ô 6/13 ‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà 29</em></li>
        <img src='https://media-hosting.imagekit.io//a39b45568dc14fab/IMG_20250208_223334.jpg?Expires=1833637018&Key-Pair-Id=K2ZIVPTIP2VGHC&Signature=M2tJAPHXihMl1OUnwNiEBpEggLW-AZag9HFNkFb51KiIR6AGcdJkV0ovnL0DfgAx8WV7-vc65vXWLKNZWoB4vzXob5AYUfwmT9XcgJ1egfOuS3B95GNj-y3maPQ7nm2iW3Yv~Zd5HfeL~D2tZu8CdiJUdFj3bB4x22uceD6zVNP8FHAuMS5qcaDTwUQgoV9RQvKQFOLjsX9JX7ZQ6olCkXmdIXM31uDSwok1Vpru12aC3p16whyHG2iJ2s1iTROwcJurWM9F-R90NCjP63ZGEa0gdrKgHC6WvKeGSmkehKsqpQv7fL3i7dXpTSV-Z-mVVh72OcJfNr1W~WRZwIjMDQ__' width='250px' style='border-radius: 50%;'>
        </ul>
        </div>
        """, unsafe_allow_html=True)

# --- Admin Panel to Reset Visitor Count ---
st.markdown("---")
st.subheader("üîß Admin Panel (‡πÄ‡∏î‡∏≤‡πÑ‡∏õ‡∏Å‡πá‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)")
admin_password = st.text_input("Enter Admin Password:", type="password")
if admin_password == st.secrets["ADMIN_PASSWORD"]:
    if st.button("Reset Visitor Count and Active Users"):
        with open(COUNTER_FILE, "w") as f:
            f.write("0")
        with open(ACTIVE_USERS_FILE, "w") as f:
            f.truncate(0)
        st.success("Visitor count and active users reset to 0.")
        st.rerun()
    
    # --- View File Contents ---
    st.subheader("üìÇ View Stored Data")
    def read_file_content(file_path):
        try:
            with open(file_path, "r") as f:
                content = f.read().strip()
                return content if content else "(Empty File)"
        except FileNotFoundError:
            return "(File Not Found)"
    
    if st.button("View Visitor Count File"):
        st.text_area("Visitor Count File Content:", read_file_content(COUNTER_FILE), height=70)
    
    if st.button("View Active Users File"):
        st.text_area("Active Users File Content:", read_file_content(ACTIVE_USERS_FILE), height=100)
else:
    st.warning("Incorrect password or unauthorized access.")
