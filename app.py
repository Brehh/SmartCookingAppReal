import streamlit as st
import google.generativeai as genai
import textwrap

# --- API Key Setup (From Streamlit Secrets) ---
API_KEYS = st.secrets["API_KEYS"]


# --- Page Configuration ---
st.set_page_config(
    page_title="üçΩÔ∏è Smart Cooking App üòé",
    page_icon="üç≥",  # Changed page icon to a frying pan
    layout="wide",
    initial_sidebar_state="expanded",
)

# --- Helper Functions ---
def call_gemini_api(prompt):
    for api_key in API_KEYS:
        try:
            genai.configure(api_key=api_key)
            model = genai.GenerativeModel("gemini-2.0-flash-lite-preview-02-05")
            response = model.generate_content(prompt)
            return response.text.strip()
        except Exception as e:
            error_message = str(e)
            if "insufficient_quota" in error_message or "Quota exceeded" in error_message:
                continue
            else:
                return f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {error_message}"
    return "‚ö†Ô∏è API ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏´‡∏°‡∏î‡πÇ‡∏Ñ‡∏ß‡∏ï‡πâ‡∏≤‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì"

def process_menus(response_text):
    menu_list = []
    separators = ["üçΩÔ∏è ‡πÄ‡∏°‡∏ô‡∏π‡∏ó‡∏µ‡πà", "\n- ", "\n‚Ä¢ ", "\n‚Äî ", "- ", "‚Ä¢ "]
    for sep in separators:
        if sep in response_text:
            menu_list = response_text.split(sep)
            break
    else:
        return [response_text.strip()]

    menu_list = [menu.strip() for menu in menu_list if menu.strip()]
    return menu_list

# --- Custom CSS ---
st.markdown("""
<style>
/* Global Styles */
body {
    font-family: 'Kanit', sans-serif;
}

.stApp {
    /* Default Streamlit background */
}

/* Main Container Styles */
.main-container {
    border-radius: 15px;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    padding: 30px;
    margin-bottom: 20px;
    border: 2px solid #e0e0e0;
}

/* Header */
.title {
    color: #343a40;
    text-align: center;
    padding: 1rem 0;
    font-size: 3rem;
    font-weight: 700;
    margin-bottom: 1rem;
}

/* Mode Selection Buttons - Using st.buttons */
.mode-buttons {
    display: flex;
    justify-content: center;
    gap: 20px; /* Spacing between buttons */
    margin-bottom: 30px;
}

.mode-button {
    background-color: #007bff; /* Blue */
    color: white;
    border: none;
    border-radius: 8px; /* Rounded */
    padding: 15px 30px; /* Larger padding */
    font-size: 1.4rem;  /* Larger font */
    font-weight: bold;
    cursor: pointer;
    transition: all 0.3s ease;
    box-shadow: 0 2px 5px rgba(0,0,0,0.2);
}

.mode-button:hover {
    background-color: #0056b3; /* Darker blue on hover */
    transform: translateY(-2px);
}

.mode-button-selected {
    background-color: #28a745; /* Green - for the selected mode */
    color: white;
    border: none;
    border-radius: 8px;
    padding: 15px 30px;
    font-size: 1.4rem;
    font-weight: bold;
    cursor: pointer;
    transition: all 0.3s ease;
    box-shadow: 0 2px 5px rgba(0,0,0,0.2);
}
.mode-button-selected:hover {
    background-color: #1e7e34;
    transform: translateY(-2px);
}
/* Subheaders */
.st-expanderHeader {
    font-size: 1.6rem; /* Even larger */
    font-weight: 700;
    margin-bottom: 0.5rem;
}

/* Input Sections */
.input-section {
    margin-bottom: 1rem;
}

/* Input Fields */
.stTextInput, .stSelectbox, .stSlider, .stRadio, .stNumberInput {
    margin-bottom: 0.8rem;
}

/* Text Area */
.stTextArea>div>div>textarea{
    border-color:#3498db;
    border-radius: 8px;
}

/* Buttons */
.stButton>button {
    background-color: #28a745;
    color: white;
    border: none;
    border-radius: 25px;
    padding: 12px 28px;
    font-size: 1.2rem;
    transition: all 0.3s ease;
    box-shadow: 0 3px 6px rgba(0, 0, 0, 0.15);
    width: 100%;
}

.stButton>button:hover {
    background-color: #218838;
    transform: translateY(-3px);
    box-shadow: 0 5px 10px rgba(0, 0, 0, 0.2);
}

.stButton>button:active {
    transform: translateY(0);
    box-shadow: 0 3px 6px rgba(0, 0, 0, 0.15);
}

/* Menu Columns */
.menu-column {
    border-radius: 12px;
    padding: 25px;
    margin-bottom: 15px;
    box-shadow: 0 3px 8px rgba(0, 0, 0, 0.1);
    transition: transform 0.25s ease, box-shadow 0.25s ease;
    border: 1px solid #dee2e6;
}

.menu-column:hover {
    transform: scale(1.02);
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.15);
}

.menu-column h3 {
    color: #28a745;
    margin-bottom: 12px;
    font-size: 1.5rem;
    font-weight: 600;
}

.menu-item {
    font-size: 1.05rem;
    line-height: 1.7;
}

/* About Section */
.about-section {
    border-radius: 12px;
    padding: 25px;
    margin-top: 30px;
    box-shadow: 0 3px 8px rgba(0, 0, 0, 0.1);
    border: 1px solid #dee2e6;
}
.about-section ul {
    list-style: none;
    padding: 0;
}

.about-section li {
    margin-bottom: 0.6rem;
}

/* Spinners */
.st-cf {
    color: #28a745 !important;
}

/* Larger and Bolder Expander Text */
.st-expander button[data-baseweb="button"] {
    font-size: 1.4rem !important; /* Larger font */
    font-weight: bold !important;   /* Bold text */
}

/* Change expander icons */
.st-expander svg {
    color: #007bff; /* Blue expander icon */
}

</style>
""", unsafe_allow_html=True)

# --- App UI ---
st.markdown("<h1 class='title'>üçΩÔ∏è Smart Cooking App üòé</h1>", unsafe_allow_html=True)

with st.container(border=True):
    # --- Mode Selection (Using Buttons) ---
    col1, col2 = st.columns(2)  # Use columns for side-by-side buttons
    with col1:
        if st.button("üìù ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏°‡∏ô‡∏π‡∏ó‡∏≥‡∏Å‡∏¥‡∏ô‡πÄ‡∏≠‡∏á üë®‚Äçüç≥", key="create_mode", type='primary' if 'mode' not in st.session_state or st.session_state.mode == "create" else 'secondary'):
            st.session_state.mode = "create"  # Store the selected mode
    with col2:
        if st.button("üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏°‡∏ô‡∏π‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ã‡∏∑‡πâ‡∏≠‡∏Å‡∏¥‡∏ô üòé", key="search_mode",  type='primary' if 'mode' in st.session_state and st.session_state.mode == "search" else 'secondary'):
            st.session_state.mode = "search"

    # --- Conditional Display based on Selected Mode ---
    if 'mode' not in st.session_state or st.session_state.mode == "create":
        st.subheader("‚ú® ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏°‡∏ô‡∏π‡πÅ‡∏ö‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏≠‡∏á")

        with st.expander("üìù ‡∏Å‡∏£‡∏≠‡∏Å‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡∏´‡∏•‡∏±‡∏Å", expanded=True):
            ingredients = st.text_area("‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡∏´‡∏•‡∏±‡∏Å (‡∏Ñ‡∏±‡πà‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏à‡∏∏‡∏•‡∏†‡∏≤‡∏Ñ):",
                                       placeholder="‡πÄ‡∏ä‡πà‡∏ô ‡πÑ‡∏Ç‡πà, ‡∏´‡∏°‡∏π‡∏™‡∏±‡∏ö, ‡∏ú‡∏±‡∏Å‡∏Å‡∏≤‡∏î...",
                                       height=120, label_visibility="collapsed")

        with st.expander("‚öôÔ∏è ‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á‡πÄ‡∏°‡∏ô‡∏π", expanded=True):
            col1, col2 = st.columns(2)
            with col1:
                category = st.selectbox("‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏≠‡∏≤‡∏´‡∏≤‡∏£",st.secrets['foodtype1'])
                calories = st.slider("‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ (kcal)", 100, 1500, 500, step=50)

            with col2:
                difficulty = st.radio("‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏Å", ["‡∏á‡πà‡∏≤‡∏¢", "‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á", "‡∏¢‡∏≤‡∏Å", '‡∏¢‡∏≤‡∏Å‡∏°‡∏≤‡∏Å', '‡∏ô‡∏£‡∏Å'], horizontal=True)
                cook_time = st.slider("‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏≠‡∏≤‡∏´‡∏≤‡∏£ (‡∏ô‡∏≤‡∏ó‡∏µ)", 5, 180, 30, step=5)

        if st.button("üç≥ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏°‡∏ô‡∏π", use_container_width=True):
            if ingredients:
                prompt = (f"‡∏â‡∏±‡∏ô‡∏°‡∏µ: {ingredients} ‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡∏´‡∏•‡∏±‡∏Å "
                          f"‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏°‡∏ô‡∏π {category} ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô {cook_time} ‡∏ô‡∏≤‡∏ó‡∏µ "
                          f"‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì {calories} kcal ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏Å ‡∏£‡∏∞‡∏î‡∏±‡∏ö{difficulty} "
                          f"‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏≥‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î ‡πÄ‡∏™‡∏ô‡∏≠ 3 ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ‡∏Ñ‡∏±‡πà‡∏ô‡∏î‡πâ‡∏ß‡∏¢ 'üçΩÔ∏è ‡πÄ‡∏°‡∏ô‡∏π‡∏ó‡∏µ‡πà' ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏Å‡∏£‡∏¥‡πà‡∏ô‡∏ô‡∏≥")
                with st.spinner("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏£‡∏£‡∏Ñ‡πå‡πÑ‡∏≠‡πÄ‡∏î‡∏µ‡∏¢‡∏≠‡∏£‡πà‡∏≠‡∏¢‡πÜ... 3 ‡πÄ‡∏°‡∏ô‡∏π"):
                    menu_list = process_menus(call_gemini_api(prompt))

                if menu_list:
                    st.subheader("üßë‚Äçüç≥ ‡πÄ‡∏°‡∏ô‡∏π‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ 3 ‡πÄ‡∏°‡∏ô‡∏π:")
                    cols = st.columns(3)
                    for i, menu in enumerate(menu_list[:3]):
                        with cols[i]:
                            st.markdown(
                                f"<div class='menu-column'><h3>üçΩÔ∏è ‡πÄ‡∏°‡∏ô‡∏π‡∏ó‡∏µ‡πà {i + 1}</h3><p class='menu-item'>{menu}</p></div>",
                                unsafe_allow_html=True)
                else:
                    st.warning("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏°‡∏ô‡∏π‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì ‡πÇ‡∏õ‡∏£‡∏î‡∏•‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤")
            else:
                st.warning("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì")

    elif st.session_state.mode == "search":
        st.subheader("‚ú® ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏°‡∏ô‡∏π‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏∏‡∏ì 3 ‡πÄ‡∏°‡∏ô‡∏π")

        with st.expander("‚öôÔ∏è ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤", expanded=True):
            col1, col2 = st.columns(2)
            with col1:
                country = st.selectbox('‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ', st.secrets['country1'])
                category = st.selectbox("‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏≠‡∏≤‡∏´‡∏≤‡∏£",st.secrets['foodtype2'])
            with col2:
                taste = st.radio("‡∏£‡∏™‡∏ä‡∏≤‡∏ï‡∏¥", ["‡πÄ‡∏ú‡πá‡∏î", "‡∏´‡∏ß‡∏≤‡∏ô", "‡πÄ‡∏Ñ‡πá‡∏°", "‡πÄ‡∏õ‡∏£‡∏µ‡πâ‡∏¢‡∏ß", "‡∏Ç‡∏°", "‡∏≠‡∏π‡∏°‡∏≤‡∏°‡∏¥", "‡∏°‡∏±‡∏ô", "‡∏ù‡∏≤‡∏î", "‡∏à‡∏∑‡∏î", '‡∏£‡∏™‡∏à‡∏±‡∏î',
                                            '‡∏Å‡∏•‡∏°‡∏Å‡∏•‡πà‡∏≠‡∏°', '‡∏Å‡∏•‡∏≤‡∏á‡πÜ'], horizontal=True)
                budget = st.radio("‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì", ['‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤ 100 ‡∏ö‡∏≤‡∏ó', '100 - 300 ‡∏ö‡∏≤‡∏ó', '300 - 1,000 ‡∏ö‡∏≤‡∏ó', '‡πÑ‡∏°‡πà‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏á‡∏ö (‡∏°‡∏µ‡∏á‡∏ö‡∏£‡∏∞‡∏î‡∏±‡∏ö Mr Beast)'], horizontal=True)

        if st.button("üîé ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏°‡∏ô‡∏π", use_container_width=True):
            prompt = (f"‡∏â‡∏±‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠‡∏≠‡∏≤‡∏´‡∏≤‡∏£ {category} ‡∏£‡∏™‡∏ä‡∏≤‡∏ï‡∏¥ {taste} ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì {budget} ‡πÉ‡∏ô {country} "
                      f"‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ 3 ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏°‡∏ô‡∏π {category} ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ç‡∏≤‡∏¢‡πÉ‡∏ô {country} ‡∏Ñ‡∏±‡πà‡∏ô‡∏î‡πâ‡∏ß‡∏¢ 'üçΩÔ∏è ‡πÄ‡∏°‡∏ô‡∏π‡∏ó‡∏µ‡πà' ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏Å‡∏£‡∏¥‡πà‡∏ô‡∏ô‡∏≥ ‡πÅ‡∏•‡∏∞‡∏ö‡∏≠‡∏Å‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≠‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ô‡∏±‡πâ‡∏ô‡πÜ‡∏î‡πâ‡∏ß‡∏¢")

            with st.spinner("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î... 3 ‡πÄ‡∏°‡∏ô‡∏π"):
                menu_list = process_menus(call_gemini_api(prompt))

            if menu_list:
                st.subheader("üßë‚Äçüç≥ ‡πÄ‡∏°‡∏ô‡∏π‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ 3 ‡πÄ‡∏°‡∏ô‡∏π:")
                cols = st.columns(3)
                for i, menu in enumerate(menu_list[:3]):
                    with cols[i]:
                        st.markdown(
                            f"<div class='menu-column'><h3>üçΩÔ∏è ‡πÄ‡∏°‡∏ô‡∏π‡∏ó‡∏µ‡πà {i + 1}</h3><p class='menu-item'>{menu}</p></div>",
                            unsafe_allow_html=True)
            else:
                st.warning("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏°‡∏ô‡∏π ‡πÇ‡∏õ‡∏£‡∏î‡∏•‡∏≠‡∏á‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á")

# --- About Section ---
st.markdown("---")
if st.button("üìú ‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏û‡∏±‡∏í‡∏ô‡∏≤", use_container_width=True):
    with st.expander("ü§ù ‡∏û‡∏ö‡∏Å‡∏±‡∏ö‡∏ó‡∏µ‡∏°‡∏á‡∏≤‡∏ô", expanded=False):
        st.markdown("""
        <div class='about-section'>
        <ul style='list-style: none; padding: 0; display: flex; flex-direction: column; align-items: center;'>

        <li style='font-size: 1.6rem; font-weight: bold; margin-top: 10px;'>‡∏ô‡∏≤‡∏¢ ‡∏Å‡∏±‡∏•‡∏õ‡∏û‡∏§‡∏Å‡∏©‡πå ‡∏ß‡∏¥‡πÄ‡∏ä‡∏µ‡∏¢‡∏£‡∏£‡∏±‡∏ï‡∏ô‡πå (‡∏Ñ‡∏ô‡πÅ‡∏ö‡∏Å‡∏≠‡∏¥‡πÜ‡πÜüòé)</li>
        <li style='font-size: 1.3rem;'><em>‡∏ä‡∏±‡πâ‡∏ô 6/13 ‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà 3</em></li>
        <img src='https://media.istockphoto.com/id/176799603/photo/3-4-profile-portrait.jpg?s=612x612&w=0&k=20&c=ArfYQTh-m4PGKwNyWypZWl6Q918m71g6aj5y8s4k1bA=' width='250px' style='border-radius: 50%; margin-bottom: 20px;'>

        <li style='font-size: 1.6rem; font-weight: bold; margin-top: 10px;'>‡∏ô‡∏≤‡∏¢ ‡∏ò‡∏µ‡∏£‡∏≤‡∏ò‡∏£ ‡∏°‡∏∏‡∏Å‡∏î‡∏≤‡πÄ‡∏û‡∏ä‡∏£‡∏£‡∏±‡∏ï‡∏ô‡πå</li>
        <li style='font-size: 1.3rem;'><em>‡∏ä‡∏±‡πâ‡∏ô 6/13 ‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà 13</em></li>
        <img src='https://media.istockphoto.com/id/176799603/photo/3-4-profile-portrait.jpg?s=612x612&w=0&k=20&c=ArfYQTh-m4PGKwNyWypZWl6Q918m71g6aj5y8s4k1bA=' width='250px' style='border-radius: 50%; margin-bottom: 20px;'>

        <li style='font-size: 1.6rem; font-weight: bold; margin-top: 10px;'>‡∏ô‡∏≤‡∏¢ ‡∏≠‡∏†‡∏¥‡∏ß‡∏¥‡∏ä‡∏ç‡πå ‡∏≠‡∏î‡∏∏‡∏•‡∏ò‡∏£‡∏£‡∏°‡∏ß‡∏¥‡∏ó‡∏¢‡πå</li>
        <li style='font-size: 1.3rem;'><em>‡∏ä‡∏±‡πâ‡∏ô 6/13 ‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà 28</em></li>
        <img src='https://media.istockphoto.com/id/176799603/photo/3-4-profile-portrait.jpg?s=612x612&w=0&k=20&c=ArfYQTh-m4PGKwNyWypZWl6Q918m71g6aj5y8s4k1bA=' width='250px' style='border-radius: 50%; margin-bottom: 20px;'>

        <li style='font-size: 1.6rem; font-weight: bold; margin-top: 10px;'>‡∏ô‡∏≤‡∏¢ ‡∏õ‡∏±‡∏ì‡∏ì‡∏ß‡∏¥‡∏ä‡∏ç‡πå ‡∏´‡∏•‡∏µ‡∏Å‡∏†‡∏±‡∏¢</li>
        <li style='font-size: 1.3rem;'><em>‡∏ä‡∏±‡πâ‡∏ô 6/13 ‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà 29</em></li>
        <img src='https://media.istockphoto.com/id/176799603/photo/3-4-profile-portrait.jpg?s=612x612&w=0&k=20&c=ArfYQTh-m4PGKwNyWypZWl6Q918m71g6aj5y8s4k1bA=' width='250px' style='border-radius: 50%;'>
        </ul>
        </div>
        """, unsafe_allow_html=True)
